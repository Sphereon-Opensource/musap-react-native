buildscript {
    // Buildscript is evaluated before everything else so we can't use getExtOrDefault
    def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["MusapRn_kotlinVersion"]

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:8.2.0"
        // noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

def reactNativeArchitectures() {
    def value = rootProject.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["MusapRn_" + name]
}

def getExtOrIntegerDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["MusapRn_" + name]).toInteger()
}

def supportsNamespace() {
    def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
    def major = parsed[0].toInteger()
    def minor = parsed[1].toInteger()

    // Namespace support was added in 7.3.0
    return (major == 7 && minor >= 3) || major >= 8
}

android {
    if (supportsNamespace()) {
        namespace "com.musaprn"

        sourceSets {
            main {
                manifest.srcFile "src/main/AndroidManifestNew.xml"
                java.srcDirs("src/main/kotlin")
                kotlin.srcDirs("src/main/kotlin")
            }
        }
    }

    compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

    defaultConfig {
        minSdkVersion getExtOrIntegerDefault("minSdkVersion")
        targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        disable "GradleCompatible"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    publishing {
        singleVariant("release")
    }
}

repositories {
    mavenCentral()
    google()
    mavenLocal()
    maven {
        url = uri("${rootProject.projectDir}/../../../node_modules/react-native/android")
    }
    maven {
        url = uri("${rootProject.projectDir}/../../../node_modules/jsc-android/dist")
    }
    maven { url = uri("https://www.jitpack.io") }
    maven {
        name = "Sphereon Public"
        url = uri("https://nexus.sphereon.com/repository/sphereon-opensource-releases")
    }
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
    // For < 0.71, this will be from the local maven repo
    // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-android:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api("fi.methics.musap:musap-android:1.0.0") {
        exclude group: "com.yubico.yubikit", module: "core"
        exclude group: "com.yubico.yubikit", module: "android"
        exclude group: "com.yubico.yubikit", module: "piv"
    }
    api("com.nimbusds:nimbus-jose-jwt:9.40")
}

task copyAar(type: Copy) {
    dependsOn 'assembleRelease'
    from("${buildDir}/outputs/aar/")
    include('android-release.aar')
    into("${projectDir}/../dist")
    rename('android-release.aar', 'musap-react-native.aar')
}

tasks.whenTaskAdded { task ->
    if (task.name == 'bundleReleaseAar') {
        task.finalizedBy copyAar
    }
}
